name: Build
run-name: Build
on:
  push:
    tags:
      - '*'
env:
  BUILD_TYPE: Release
jobs:
  # build-linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install Qt
  #     # Installs the Qt SDK
  #     uses: jurplel/install-qt-action@v3
  #     with:
  #       version: '6.8.0'
  #
  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  #   - name: Install
  #     run: |
  #       cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --prefix="$(pwd)/bin"
  #       tar -cvf bin.tar bin

  #   - uses: actions/upload-artifact@v4
  #     with:
  #       name: linux
  #       path: |
  #         ${{github.workspace}}/build
  #         ${{github.workspace}}/bin.tar
  #       retention-days: 7

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Install Qt
      # Installs the Qt SDK
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtnetworkauth qtwebsockets qthttpserver qtimageformats'
        tools: 'tools_ifw tools_opensslv3_x64'
        add-tools-to-path: true

    - name: Build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        VCINSTALLDIR: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC'
      run: |
        tree /A /F "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC"

        # tree /A /F "$env:IQTA_TOOLS"
        # tree /A /F "D:\a\tootrain-qt\Qt\6.8.0\msvc2019_64"

        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --prefix="./bin"
        windeployqt --release '.\bin\bin\tootrain-qt.exe'

        cp "${{github.workspace}}/build/tootrain-qt_ja.qm" "${{github.workspace}}/bin/bin"
        cp "$env:IQTA_TOOLS\OpenSSLv3\Win_x64\bin\libssl-3-x64.dll" '.\bin\bin\'
        cp "$env:IQTA_TOOLS\OpenSSLv3\Win_x64\bin\libcrypto-3-x64.dll" '.\bin\bin\'

        mkdir "${{github.workspace}}\installer-win\net.b123400.tootrainqt\data\"
        cp -R .\bin\bin "${{github.workspace}}\installer-win\net.b123400.tootrainqt\data\"
        ../Qt/Tools/QtInstallerFramework/4.7/bin/binarycreator.exe -c config/config.xml -p installer-win Installer.exe

    - uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: |
          Installer.exe
