name: Build
run-name: Build
on:
  push:
    tags:
      - '*'
env:
  BUILD_TYPE: Release
jobs:
  build-linux:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Download QT static
      env:
        QT_STATIC_PASSWORD: ${{ secrets.QT_STATIC_PASSWORD }}
      run: |
        sudo apt-get install cmake \
          python3 \
          build-essential \
          libgl1-mesa-dev \
          libfontconfig1-dev \
          libfreetype-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxcb-cursor-dev \
          libxcb-glx0-dev \
          libxcb-icccm4-dev \
          libxcb-image0-dev \
          libxcb-keysyms1-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-shape0-dev \
          libxcb-shm0-dev \
          libxcb-sync-dev \
          libxcb-util-dev \
          libxcb-xfixes0-dev \
          libxcb-xinerama0-dev \
          libxcb-xkb-dev \
          libxcb1-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libxrender-dev
        sudo apt install unzip
        cd ..
        curl -u "tootrain-qt-github:${QT_STATIC_PASSWORD}" https://b123400.net/tootrain/qt-static.zip > ./qt-static.zip
        unzip qt-static.zip

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: CMAKE_PREFIX_PATH="../qt-static" cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: CMAKE_PREFIX_PATH="../qt-static" cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: |
        cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --prefix="$(pwd)/bin"
        tar -cvf ubuntu.tar bin
        ldd ./bin/bin/tootrain-qt

    - uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: |
          ${{github.workspace}}/ubuntu.tar

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.8.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtnetworkauth qtwebsockets qthttpserver qtimageformats'
        tools: 'tools_ifw tools_opensslv3_x64'
        add-tools-to-path: true
    - name: Build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        VCINSTALLDIR: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC'
      run: |
        # tree /A /F "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC"

        # tree /A /F "$env:IQTA_TOOLS"
        # tree /A /F "D:\a\tootrain-qt\Qt\6.8.0\msvc2019_64"

        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --prefix="./bin"
        windeployqt --release '.\bin\bin\tootrain-qt.exe'

        cp "${{github.workspace}}/build/tootrain-qt_ja.qm" "${{github.workspace}}/bin/bin"
        cp "$env:IQTA_TOOLS\OpenSSLv3\Win_x64\bin\libssl-3-x64.dll" '.\bin\bin\'
        cp "$env:IQTA_TOOLS\OpenSSLv3\Win_x64\bin\libcrypto-3-x64.dll" '.\bin\bin\'

        mkdir "${{github.workspace}}\installer-win\net.b123400.tootrainqt\data\"
        cp -R .\bin\bin "${{github.workspace}}\installer-win\net.b123400.tootrainqt\data\"
        ../Qt/Tools/QtInstallerFramework/4.7/bin/binarycreator.exe -c config/config.xml -p installer-win Installer.exe

    - uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: |
          Installer.exe
